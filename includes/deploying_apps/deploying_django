<h2 id="deploying-a-django-app">Deploying a Django app</h2>

<p>This section explains how to deploy an app using the Django framework. You may also need to refer to the <a href="https://docs.cloudfoundry.org/buildpacks/python/index.html">Cloud Foundry documentation about the Python buildpack</a>.</p>

<p>Note that the only database service currently supported by PaaS is PostgreSQL. If your Django app requires a database, it must be able to work with PostgreSQL.</p>

<p>These steps assume you have already carried out the setup process explained in the <a href="/getting_started/quick_setup_guide">Quick Setup Guide</a> section.</p>

<p>If you are just getting started learning CloudFoundry, you can use the sandbox space by running: <code class="prettyprint">cf target -s sandbox</code></p>

<ol>
<li><p>Check out your Django app to a local folder.</p></li>
<li><p>Add <code class="prettyprint">*.pyc</code> and <code class="prettyprint">local_settings.py</code> to your <code class="prettyprint">.gitignore</code>, file, then 
<a href="/deploying_apps/excluding_files/">exclude files ignored by Git</a> so Cloud Foundry will ignore them too.</p></li>
<li><p>Tell Cloud Foundry which Python runtime to use by creating a <code class="prettyprint">runtime.txt</code>   file in the root of the local folder. The contents of the file should<br>
be:</p>

<p>python-3.5.1  </p>

<p>replacing &ldquo;3.5.1&rdquo; with the version of Python you want to use.</p></li>
<li><p>Generate a <code class="prettyprint">requirements.txt</code> file if your project doesn&rsquo;t already have one by running <code class="prettyprint">pip freeze &gt; requirements.txt</code> in the root of the local folder.
Add the following lines to the <code class="prettyprint">requirements.txt</code> file.</p>

<p>whitenoise==1.0.6  #manages static assets
    dj-database-url==0.3.0 #grabs environment variables and dumps them into a Django settings file
    waitress==0.8.9 #a pure python WSGI server that is a replacement for gunicorn</p></li>
<li><p>Edit your <code class="prettyprint">wsgi.py</code> file.</p>

<p>When you create a Django project, a default <code class="prettyprint">wsgi.py</code> file should be created for you in the project folder. Excluding the opening comments, the default <code class="prettyprint">wsgi.py</code> looks like this:</p>

<p>import os
    os.environ.setdefault(&ldquo;DJANGO_SETTINGS_MODULE&rdquo;, &ldquo;PROJECTNAME.settings&rdquo;)</p>

<p>from django.core.wsgi import get_wsgi_application
    application = get_wsgi_application()</p>

<p>You&rsquo;ll need to add a few lines to import the <code class="prettyprint">whitenoise</code> package and wrap the middleware around the WSGI application so that all static files are served using whitenoise. Edit your <code class="prettyprint">wsgi.py</code> to:</p>

<p>import os
    from django.core.wsgi import get_wsgi_application</p>

<p>os.environ.setdefault(&ldquo;DJANGO_SETTINGS_MODULE&rdquo;, &ldquo;PROJECTNAME.settings&rdquo;)
    # important that the whitenoise import is after the line above
    from whitenoise.django import DjangoWhiteNoise</p>

<p>application = get_wsgi_application()
    application = DjangoWhiteNoise(application)</p>

<p>The order here is important. The <code class="prettyprint">DJANGO_SETTINGS_MODULE</code> environment variable must be set before importing <code class="prettyprint">DjangoWhiteNoise</code>.</p></li>
<li><p>You should now tell Django where to look for static files. In <code class="prettyprint">settings.py</code> within the project folder, add these lines below the <code class="prettyprint">import os</code> statement.</p>

<p>PROJECT_ROOT = os.path.dirname(os.path.abspath(<strong>file</strong>))</p>

<p>STATIC_ROOT = os.path.join(PROJECT_ROOT, &lsquo;static&rsquo;)
    STATIC_URL = &rsquo;/static/&rsquo;</p>

<p>In this case, the STATIC_ROOT variable tells Django to look for static files in a directory called <code class="prettyprint">static</code> inside the project folder, and the STATIC_URL variable sets the path where those files will be served.</p>

<p>You may need to alter these values depending on how static files are handled in your app.</p>

<p>If your static files are located across multiple folders, you may need to use the STATICFILES_DIRS variable. See the Django documentation for <a href="https://docs.djangoproject.com/en/1.9/howto/static-files/">full details on managing static files</a>.</p></li>
<li><p>Create a file called <code class="prettyprint">Procfile</code> in the root of your local folder, 
and put in it:</p>

<p>web: waitress-serve &ndash;port=$PORT PROJECTNAME.wsgi:application</p>

<p><code class="prettyprint">PROJECTNAME</code> should be replaced with whatever the name of your WSGI module is. By default, this is the same as the name of your project module, but it may be changed using the DJANGO_SETTINGS_MODULE environment variable.</p></li>
<li><p>Create a <code class="prettyprint">manifest.yml</code> file in the root of your local folder.</p>

<p>&mdash;
    applications:
    - name: my-app
      memory: 512M</p>

<p>where <code class="prettyprint">my-django-app</code> is the name that will be used for the app within Government PaaS.</p>

<p>Replace <code class="prettyprint">my-django-app</code> with a unique name for your app. (You can use <code class="prettyprint">cf apps</code> to see apps which already exist).</p>

<p>The <code class="prettyprint">memory</code> line tells the PaaS how much memory to allocate to the app.</p></li>
<li><p>If your app requires a database, <a href="/deploying_services/postgres/">create a PostgreSQL backing service and bind it to your app</a>. Then see the section on <a href="#">PostgreSQL setup</a> below.</p></li>
<li><p>To push your app, do:</p>

<p><code class="prettyprint">cf push APPNAME</code></p>

<p>from the local folder.</p></li>
</ol>

<p>You can now view your app at <code class="prettyprint">https://APPNAME.cloudapps.digital</code>.</p>

<h3 id="postgresql-setup">PostgreSQL setup</h3>

<p>In your <code class="prettyprint">settings.py</code> file, make sure you import the package we added to the <code class="prettyprint">requirements.txt</code> file above:</p>

<p>import dj_database_url</p>

<p>Then, you&rsquo;ll need to add a <code class="prettyprint">DATABASES</code> setting. It&rsquo;s best to add this to the <code class="prettyprint">settings.py</code> file. </p>

<p>DATABASES = {}
        DATABASES[&#39;default&rsquo;] =  dj_database_url.config()</p>

<p>Your <code class="prettyprint">local_settings.py</code> file will override this when you&rsquo;re working locally.</p>

<p>To have database migrations automatically applied, amend your <code class="prettyprint">Procfile</code> to contain the following:</p>

<p>web: python manage.py migrate &amp;&amp; waitress-serve &ndash;port=$PORT PROJECTNAME.wsgi:application</p>

<p>Again, remember to replace <code class="prettyprint">PROJECTNAME</code> with the name of your WSGI module.</p>
